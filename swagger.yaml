openapi: 3.0.0
info:
  title: FoodExpress API
  version: "1.0.0"
  description: RESTful API for FoodExpress online food ordering service

servers:
  - url: http://localhost:8080
    description: Local server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:

  ################################
  # USERS
  ################################
  /users/register:
    post:
      summary: Register a new user (public)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  enum: [user, admin]
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                        enum: [user, admin]
        '400':
          description: Email already exists or invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email already exists

  /users/login:
    post:
      summary: Login user and get JWT (public)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                  token:
                    type: string
        '400':
          description: Login failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login failed

  /users/update:
    put:
      summary: Update own user information (with auth)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User information updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User information updated successfully
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found

  /users/remove:
    delete:
      summary: Delete own user account (with auth)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Account deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found

  /users:
    get:
      summary: Admin gets all users (Admin-only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: All users fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All users fetched successfully
                  total:
                    type: integer
                    example: 3
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        username:
                          type: string
                        email:
                          type: string
                        role:
                          type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Forbidden

  /users/update/{id}:
    put:
      summary: Admin updates specific user (Admin-only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                role:
                  type: string
                  enum: [user, admin]
      responses:
        '200':
          description: User updated successfully (by admin)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User updated successfully (by admin)
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
        '404':
          description: User not found
        '403':
          description: Forbidden

  /users/remove/{id}:
    delete:
      summary: Admin deletes specific user (Admin-only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully (by admin)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully (by admin)
        '404':
          description: User not found
        '403':
          description: Forbidden

  ################################
  # RESTAURANTS
  ################################
  /restaurants:
    get:
      summary: Get all restaurants with sorting (public)
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [name, address]
      responses:
        '200':
          description: Restaurants fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  currentPage:
                    type: integer
                  totalPages:
                    type: integer
                  totalRestaurants:
                    type: integer
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
                        address:
                          type: string
                        phone:
                          type: string
                        opening_hours:
                          type: string

  /restaurants/create:
    post:
      summary: Admin creates restaurant (Admin-only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - address
                - phone
                - opening_hours
              properties:
                name:
                  type: string
                address:
                  type: string
                phone:
                  type: string
                opening_hours:
                  type: string
      responses:
        '201':
          description: Restaurant created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Restaurant created
                  restaurant:
                    type: object
        '403':
          description: Forbidden

  /restaurants/update/{id}:
    put:
      summary: Admin updates restaurant (Admin-only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: string
                phone:
                  type: string
                opening_hours:
                  type: string
      responses:
        '200':
          description: Restaurant updated
        '404':
          description: Restaurant not found
        '403':
          description: Forbidden

  /restaurants/remove/{id}:
    delete:
      summary: Admin deletes restaurant (Admin-only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Restaurant deleted successfully
        '404':
          description: Restaurant not found
        '403':
          description: Forbidden

  ################################
  # MENUS
  ################################
  /menus:
    get:
      summary: Get all menus (public)
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [price, category]
      responses:
        '200':
          description: Menus fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  currentPage:
                    type: integer
                  totalPages:
                    type: integer
                  totalMenus:
                    type: integer
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        restaurant_id:
                          type: string
                        name:
                          type: string
                        description:
                          type: string
                        price:
                          type: number
                        category:
                          type: string

  /menus/create:
    post:
      summary: Admin creates menu (Admin-only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - restaurant_id
                - name
                - description
                - price
                - category
              properties:
                restaurant_id:
                  type: string
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                category:
                  type: string
      responses:
        '201':
          description: Menu created
        '403':
          description: Forbidden

  /menus/update/{id}:
    put:
      summary: Admin updates menu (Admin-only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                restaurant_id:
                  type: string
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                category:
                  type: string
      responses:
        '200':
          description: Menu updated
        '404':
          description: Menu not found
        '403':
          description: Forbidden

  /menus/remove/{id}:
    delete:
      summary: Admin deletes menu (Admin-only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Menu deleted successfully
        '404':
          description: Menu not found
        '403':
          description: Forbidden
